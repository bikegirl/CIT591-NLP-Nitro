Welcome to project NLP Nitro!


******************************************************
You can choose to work in groups of up to 3 people. At this stage, you need to outline your project idea and your teammates. You need to submit a file with the following:

Names of the members of the team (each team just needs to submit once):
Trevor Wexner
Rebecca Iglesias-Flores


***********************************************
Project idea along with a short description
Trevor - background in Machine Learning and Python.
Rebecca - background in NLP tasks and Python.

We'd like to design a project that incorporates both of our backgrounds.
Although we have a little experience in tasks related to Machine Learning and NLP, we'd
like to delve into an idea that we have not yet tackled but still utilizes our backgrounds.

Create a program that, given a sequence of words, returns a sequence with the same meaning, but more sophisticated synonyms substituted for the original text. A common problem when writing (especially students writing essays) is looking for more sophisticated synonyms to a given word. This program will have a GUI that allows the user to load in a text file, then returns a new file with each word substituted for the synonym with the highest level of complexity. 

— Implementation:
If a database containing word complexities exists, the program would first look at a table of synonyms to each word, then pick the word of those synonyms with maximum complexity. Here we will just measure complexity by length of the word.

- Possible add on ideas
	- Produce a user interface that also allows for the user to type in a sequence of text, rather than load in a file. Then return the new sequence in the output
	- Allow the user to adjust the “complexity” of the returned text on a scale of 1-5. The returned text would then have the average complexity returned according to that scale. Often it sounds absurd if every word used is overly sophisticated. Some happy medium of sophisticated enough but not overly so could be good —> we could also just build this into our algorithm
	- Also add on a feature that changes the tone of the text to happier
	- Train a more sophisticated model for complexity, using SVM and academic data

- Possible data sources for synonyms:
	- https://wordnet.princeton.edu/
	- https://www.wordsapi.com/
	- Scrape code from thesaurus.com
	-google n-gram corpus for frequency (related to complexity)

- Possible sources for parts of speech (parsers):
	- Stanford Core NLP if Java used
	- NLTK if Java used
	- spaCy if

- Possible sources for databases and dictionaries:
 	- simple PPDB
	- PPDB

- Possible re-implementation of these NLP papers in the opposite direction
	- Cite:
	- http://cis.upenn.edu/~ccb/publications/simple-ppdb.pdf
	- https://mail.google.com/mail/u/1/#inbox/QgrcJHsBnjjclnZBtRVBWHVpGMhkRDxqMml?projector=1&messagePartId=0.1	


Tasks to be completed
(1) Write code to pull a given word’s part of speech from a sentence (& verify with NLTK or Stanford Core NLP)
(2) Get connection to API/web to pull set of specific synonyms to a given word (for specific part of speech)
(3) Write algorithm to word-by word compute which word should be substituted given the user-input complexity score (&, if applicable, connect to external complexity database)
(4) Write text analyzer class
(5) Write file parser
(6) Write file writer
(7) Write GUI

******************************************
A short work breakdown – who will do what?

Becca - (1)(2)
Trevor - (3)
Split 4-7 pretty evenly